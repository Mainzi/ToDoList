swagger: '2.0'
info:
  description: TO-do list with category!
  version: 1.0.0
  title: ToDO list
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: http://todolistmainzi.azurewebsites.net/
basePath: /api/
tags:
  - name: tasks
    description: Operations about tasks
  - name: user
    description: Operations about user
schemes:
  - http
paths:
  /tasks:
    post:
      tags:
        - task
      summary: Add a new task with smth category to the list
      description: 'New task'
      operationId: addTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: AddTask
          in: path
          description: description your task
          key: unique key for task
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        default:
          description: OK
    put:
      tags:
        - task
      summary: Update an existing task
      description: 'Change'
      operationId: updateTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: UpdateTask
          in: path
          description: Descriptionedited your task
          type: string
          required: true
        - name: key of task
          in: path
          description: key
          key: unique key for task
          schema:
            $ref: '#/definitions/Task'
      responses:
        '400':
          description: Invalid key supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
  '/task/{taskKey}':
    get:
      tags:
        - task
      summary: Find task by key
      description: Returns a single task
      operationId: getTaskByKey
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskKey
          in: path
          description: Key of task to return
          required: true
          key: unique key for task
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid key supplied
        '404':
          description: Task not found
    delete:
      tags:
        - task
      summary: Delete a task
      description: 'Delete your task'
      operationId: deleteTask
      produces:
        - application/xml
        - application/json
      parameters:
        - name: key of task
          in: path
          description: Task key to delete
          required: true
          key: unique key for task
      responses:
        '400':
          description: Invalid key supplied
        '404':
          description: Task not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  todo-list_auth:
    type: firebase
    authorizationUrl: 'http://todolistmainzi.azurewebsites.net/auth.html'
    flow: implicit
    scopes:
      'read:tasks': read your tasks
      'write:tasks': create new tasks
      'delete:tasks': delete existing tasks
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      password:
        type: string
    xml:
      name: User
  Task:
    type: object
    required:
      - name
    properties:
      id:
        type: string
      description:
        type: string
    xml:
      name: Task
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about time management
  url: 'http://ru.wikipedia.org'
